
* Window management

Provides interactive functions which allows users to transpose windows
arrangement in the currently frame.

#+BEGIN_SRC emacs-lisp
(use-package transpose-frame)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package hydra
  :config
  (hydra-add-font-lock)
)
#+END_SRC

Define splitter resize commands for hydra menu.

#+BEGIN_SRC emacs-lisp
(require 'windmove)

(defun hydra-move-splitter-left (arg)
  "Move window splitter left."
  (interactive "p")
  (if (let ((windmove-wrap-around))
        (windmove-find-other-window 'right))
      (shrink-window-horizontally arg)
    (enlarge-window-horizontally arg)))

(defun hydra-move-splitter-right (arg)
  "Move window splitter right."
  (interactive "p")
  (if (let ((windmove-wrap-around))
        (windmove-find-other-window 'right))
      (enlarge-window-horizontally arg)
    (shrink-window-horizontally arg)))

(defun hydra-move-splitter-up (arg)
  "Move window splitter up."
  (interactive "p")
  (if (let ((windmove-wrap-around))
        (windmove-find-other-window 'up))
      (enlarge-window arg)
    (shrink-window arg)))

(defun hydra-move-splitter-down (arg)
  "Move window splitter down."
  (interactive "p")
  (if (let ((windmove-wrap-around))
        (windmove-find-other-window 'up))
      (shrink-window arg)
    (enlarge-window arg)))
#+END_SRC

Group window related commands into a [[https://github.com/abo-abo/hydra][hydra]] menu

#+BEGIN_SRC emacs-lisp
(defhydra hydra-window (:color pink)
  "
  ^Navigation^     ^Size/Splitting^           ^Arrangement^
  ^^^^^^^^----------------------------------------------------------------------
  _h_: left        _H_: decrease width        _fv_: flip vertically
  _j_: down	   _J_: decrease height       _fh_: flip horizontally
  _k_: up	   _K_: increase height       _rc_: rotate frame clockwise
  _l_: right	   _L_: increase width        _ra_: rotate frame anti-clockwise
  _n_: next  	   _sv_: split vertically      _=_: make all same width/height
  _p_: previous    _sh_: split horizontally

  _d_: delete selected                       _e_: delete all except selected

  "
  ("h" windmove-left   nil :color red)
  ("j" windmove-down   nil :color red)
  ("k" windmove-up     nil :color red)
  ("l" windmove-right  nil :color red)
  ("n" next-window     nil)
  ("p" previous-window nil)

  ("H" hydra-move-splitter-left   nil)
  ("J" hydra-move-splitter-down   nil)
  ("K" hydra-move-splitter-up     nil)
  ("L" hydra-move-splitter-right  nil)
  ("sv" split-window-vertically   nil)
  ("sh" split-window-horizontally nil)

  ("<left>"  windmove-left  nil)
  ("<down>"  windmove-down  nil)
  ("<up>"    windmove-up    nil)
  ("<right>" windmove-right nil)

  ("<S-left>"  hydra-move-splitter-left  nil)
  ("<S-down>"  hydra-move-splitter-down  nil)
  ("<S-up>"    hydra-move-splitter-up    nil)
  ("<S-right>" hydra-move-splitter-right nil)

  ("fv" flip-frame                  nil)
  ("fh" flop-frame                  nil)
  ("rc" rotate-frame-clockwise      nil)
  ("ra" rotate-frame-anti-clockwise nil)
  ("="  balance-windows             nil)

  ("d" delete-window             nil)
  ("e" delete-other-windows      nil)
  ("0" delete-window             nil)
  ("1" delete-other-windows      nil)
  ("2" split-window-vertically   nil)
  ("3" split-window-horizontally nil)

  ("ESC" nil "quit")
  ("SPC" nil "quit")
  ("q" nil "quit")
)
(global-set-key (kbd "C-x w") 'hydra-window/body)
#+END_SRC

* Window numbering

#+BEGIN_SRC emacs-lisp
(use-package window-numbering
  :config
  (window-numbering-mode)
)
#+END_SRC

Set appearance of window number

#+BEGIN_SRC emacs-lisp
(set-face-attribute 'window-numbering-face nil
                    :weight 'bold
                    :underline t
                    :background "gray"
                    :foreground "red")
#+END_SRC
