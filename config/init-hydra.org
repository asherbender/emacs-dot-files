* Hydra menus

Allow related commands to be grouped into [[https://github.com/abo-abo/hydra][hydra]] menus

#+begin_src emacs-lisp :exports none
(use-package hydra
  :config
  (hydra-add-font-lock)
)
#+END_SRC

** Main Hydra

Create a 'main' Hydra for launching other Hydra menus

#+BEGIN_SRC emacs-lisp
(defhydra hydra-main (:color pink)
  "
  ^^Navigation^^                     | Menus
  ^^-------------------------------^^+---------------------------------
  _h_/_H_: backward  char/word       |  _w_: Window management
  _j_/_J_: previous  line/paragraph  |  _b_: Buffer management
  _k_/_K_: next      line/paragraph  |  _m_: Magit
  _l_/_L_: forward   char/word       |  _o_: Origami
  _a_^^: home                        |
  _e_^^: end                         |

  "
  ("h" backward-char      nil :color red)
  ("j" next-line          nil :color red)
  ("k" previous-line      nil :color red)
  ("l" forward-char       nil :color red)
  ("H" backward-word      nil :color red)
  ("J" forward-paragraph  nil :color red)
  ("K" backward-paragraph nil :color red)
  ("L" forward-word       nil :color red)
  ("a" beginning-of-line  nil)
  ("e" move-end-of-line   nil)

  ("w" hydra-window/body  nil :exit t)
  ("b" hydra-buffer/body  nil :exit t)
  ("m" magit-status       nil :exit t)
  ("o" hydra-origami/body nil :exit t)

  ("RET" nil "quit")
  ("ESC" nil "quit")
  ("SPC" nil "quit")
  ("q"   nil "quit")
)
#+END_SRC

Enable key-chords and assign a [[https://github.com/abo-abo/hydra][hydra]] menu to an infrequently used
repeat bigram (for efficiency). Bigram text analysis by [[http://norvig.com/mayzner.html][Norvig]] shows
that =jj= is an infrequent pair and on the home row, as shown below:

| Bigram | Percentage |     Counts     |
|--------+------------+----------------|
|   aa   |   0.003%   |     79,794,787 |
|   bb   |   0.011%   |    308,276,690 |
|   cc   |   0.083%   |  2,344,219,345 |
|   dd   |   0.043%   |  1,205,446,875 |
|   ee   |   0.378%   | 10,647,199,443 |
|   ff   |   0.146%   |  4,125,634,219 |
|   gg   |   0.025%   |    697,999,944 |
|   hh   |   0.001%   |     14,730,425 |
|   ii   |   0.023%   |    642,384,029 |
|   jj   |   0.000%   |      2,979,950 |
|   kk   |   0.000%   |     12,782,664 |
|   ll   |   0.577%   | 16,257,360,474 |
|   mm   |   0.096%   |  2,708,822,249 |
|   nn   |   0.073%   |  2,051,719,074 |
|   oo   |   0.210%   |  5,928,601,045 |
|   pp   |   0.137%   |  3,850,125,519 |
|   qq   |   0.000%   |      1,712,219 |
|   rr   |   0.121%   |  3,404,547,067 |
|   ss   |   0.405%   | 11,421,755,201 |
|   tt   |   0.171%   |  4,812,693,687 |
|   uu   |   0.001%   |     22,006,895 |
|   vv   |   0.000%   |      2,622,571 |
|   ww   |   0.000%   |      7,377,619 |
|   xx   |   0.003%   |     79,068,246 |
|   yy   |   0.000%   |      1,993,017 |
|   zz   |   0.003%   |     75,012,595 |

(scraped from [[[http://norvig.com/mayzner.html][source]]])

#+BEGIN_SRC emacs-lisp
(key-chord-define-global "jj" 'hydra-main/body)
#+END_SRC


** Buffer Hydra

Group related buffer commands

#+BEGIN_SRC emacs-lisp
(defhydra hydra-buffer (:color pink)
  "
  ^Selection^       ^Swap^
  ^^^^^^^^------------------------------------------------------------
  _n_: next         _h_: left
  _p_: previous     _j_: down
  _b_: select       _k_: up
  _a_: jump         _l_: right
  _d_: kill

  "
  ("n" next-buffer      nil)
  ("p" previous-window  nil)
  ("b" switch-to-buffer nil :color blue)
  ("a" ace-jump-buffer  nil :color blue)
  ("d" kill-buffer      nil :color blue)

  ("h" buf-move-left   nil :color red)
  ("j" buf-move-down   nil :color red)
  ("k" buf-move-up     nil :color red)
  ("l" buf-move-right  nil :color red)

  ("<left>"  buf-move-left  nil)
  ("<down>"  buf-move-down  nil)
  ("<up>"    buf-move-up    nil)
  ("<right>" buf-move-right nil)

  ("RET" nil "quit")
  ("ESC" nil "quit")
  ("SPC" nil "quit")
  ("q"   nil "quit")
)
#+END_SRC


** Window Hydra

Group related window commands

#+BEGIN_SRC emacs-lisp
(require 'hydra-examples)
(defhydra hydra-window (:color pink)
  "
  ^Navigation^     ^Size/Splitting^           ^Arrangement^
  ^^^^^^^^----------------------------------------------------------------------
  _h_: left        _H_: decrease width        _fv_: flip vertically
  _j_: down	   _J_: decrease height       _fh_: flip horizontally
  _k_: up	   _K_: increase height       _rc_: rotate frame clockwise
  _l_: right	   _L_: increase width        _ra_: rotate frame anti-clockwise
  _n_: next  	   _sv_: split vertically      _=_: make all same width/height
  _p_: previous    _sh_: split horizontally
  _a_: jump

  _d_: delete selected                       _e_: delete all except selected

  "
  ("h" windmove-left   nil :color red)
  ("j" windmove-down   nil :color red)
  ("k" windmove-up     nil :color red)
  ("l" windmove-right  nil :color red)
  ("n" next-window     nil)
  ("p" previous-window nil)
  ("a" ace-window      nil :color blue)

  ("H" hydra-move-splitter-left   nil)
  ("J" hydra-move-splitter-down   nil)
  ("K" hydra-move-splitter-up     nil)
  ("L" hydra-move-splitter-right  nil)
  ("sv" split-window-vertically   nil)
  ("sh" split-window-horizontally nil)

  ("<left>"  windmove-left  nil)
  ("<down>"  windmove-down  nil)
  ("<up>"    windmove-up    nil)
  ("<right>" windmove-right nil)

  ("<S-left>"  hydra-move-splitter-left  nil)
  ("<S-down>"  hydra-move-splitter-down  nil)
  ("<S-up>"    hydra-move-splitter-up    nil)
  ("<S-right>" hydra-move-splitter-right nil)

  ("fv" flip-frame                  nil)
  ("fh" flop-frame                  nil)
  ("rc" rotate-frame-clockwise      nil)
  ("ra" rotate-frame-anti-clockwise nil)
  ("="  balance-windows             nil)

  ("d" delete-window             nil)
  ("e" delete-other-windows      nil)
  ("0" delete-window             nil)
  ("1" delete-other-windows      nil)
  ("2" split-window-vertically   nil)
  ("3" split-window-horizontally nil)

  ("RET" nil "quit")
  ("ESC" nil "quit")
  ("SPC" nil "quit")
  ("q"   nil "quit")
)
#+END_SRC


** Origami Hydra

#+BEGIN_SRC emacs-lisp
  (defhydra hydra-origami (:color pink)
    "
    ^Node^           | ^Recursive^ | ^All^
    ^----^-----------+-^---------^-+-^---^------
    _h_: close       | _h_: close  | _H_: close
    _j_: previous    | _l_: open   | _L_: open
    _k_: next        | ^ ^         |
    _l_: open        | ^ ^         |
    _<tab>_: toggle  | ^ ^         | _<backtab>_: toggle
    _s_: show

    _u_: Undo          _U_: redo     _r_: rest

    "

    ;; Single node
    ("h" origami-close-node       nil)   ;; Close a fold node
    ("j" origami-previous-fold    nil)   ;; Move to the previous fold
    ("k" origami-next-fold        nil)   ;; Move to the next fold
    ("l" origami-open-node        nil)   ;; Open a fold node

    ;; Close everything but the folds necessary to see the point. Very
    ;; useful for concentrating on an area of code.
    ("s" origami-show-only-node nil)

    ;; Like origami-open-node but also opens parent fold nodes
    ;; recursively so as to ensure the position where point is is
    ;; visible.
    ("S"  origami-show-node   nil)

    ;; Acts like org-mode header collapsing. Cycle a fold between open,
    ;; recursively open, closed.
    ("<tab>"  origami-recursively-toggle-node nil)

    ("h" origami-close-node-recursively nil) ;; Close a fold node & children
    ("l" origami-open-node-recursively  nil) ;; Open a fold node & children

    ;; All nodes
    ("H" origami-close-all-nodes  nil)    ;; Close every fold in the buffer
    ("L" origami-open-all-nodes   nil)    ;; Open every fold in the buffer
    ("<backtab>" origami-toggle-all-nodes nil)    ;; Toggle open/closed every fold node

    ;; Search forward on this line for a node and toggle it open or
    ;; closed. This makes toggling nodes much more convenient.
    ("" origami-forward-toggle-node nil)

    ("u" origami-undo nil)  ;; Undo the last folding operation
    ("U" origami-redo nil)  ;; Redo the last undone folding operation
    ("r" origami-reset nil) ;; Reset origami state

    ;; Ways to exit.
    ("RET" nil "quit")
    ("ESC" nil "quit")
    ("SPC" nil "quit")
    ("q"   nil "quit")
  )
#+END_SRC
