* Minibuffer completion

Configure behaviour for saving minibuffer history:

#+BEGIN_SRC emacs-lisp
  (savehist-mode 1)
  (setq savehist-file (concat user-emacs-auto-directory "minibuffer-history"))
#+END_SRC

** Completion style (backend)

#+BEGIN_QUOTE
This package provides an orderless completion style that divides the pattern
into space-separated components, and matches candidates that match all of the
components in any order. Each component can match in any one of several ways:
literally, as a regexp, as an initialism, in the flex style, or as multiple word
prefixes. By default, regexp and literal matches are enabled. [[[https://github.com/oantolin/orderless][source]]]
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
  (use-package orderless
    :ensure t
    :custom
    (completion-styles '(orderless basic))
    (completion-category-overrides '((file (styles partial-completion))))
  )
#+END_SRC

#+BEGIN_QUOTE
Consult provides search and navigation commands based on the Emacs completion
function completing-read. Completion allows you to quickly select an item from a
list of candidates. Consult offers asynchronous and interactive =consult-grep=
and =consult-ripgrep= commands, and the line-based search command
=consult-line=. [[[https://github.com/minad/consult][source]]]
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
  (use-package consult
    :ensure t
    :bind (("C-s" . consult-line)
           ("C-x b" . consult-buffer)
          )
    :hook (completion-list-mode . consult-preview-at-point-mode)
    :custom
    (consult-preview-key '("M-."))
    (consult-narrow-key "<")
  )
#+END_SRC

** Minibuffer completion UI (frontend)

#+BEGIN_QUOTE
Vertico provides a performant and minimalistic vertical completion UI based on
the default completion system. The focus of Vertico is to provide a UI which
behaves correctly under all circumstances. By reusing the built-in facilities
system, Vertico achieves full compatibility with built-in Emacs completion
commands and completion tables. Vertico only provides the completion UI but aims
to be highly flexible, extendable and modular. [[[https://github.com/minad/vertico][source]]]
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
  (use-package vertico
    :ensure t
    :init
    (vertico-mode)
    :custom
    (vertico-cycle t) ;; Allow cycling through candidates
  )
#+END_SRC

*** Annotate minibuffer completions

#+BEGIN_QUOTE
Marginalia are marks or annotations placed at the margin of the page of a book
or in this case helpful colorful annotations placed at the margin of the
minibuffer for your completion candidates. Marginalia can only add annotations
to the completion candidates. It cannot modify the appearance of the candidates
themselves, which are shown unaltered as supplied by the original
command. [[[https://github.com/minad/marginalia/][source]]]
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
  (use-package marginalia
    :ensure t
    :init
    (marginalia-mode)
  )
#+END_SRC

*** minibuffer completions

#+BEGIN_QUOTE
Embark makes it easy to choose a command to run based on what is near point,
both during a minibuffer completion session (in a way familiar to Helm or
Counsel users) and in normal buffers. Bind the command =embark-act= to a key and
it acts like prefix-key for a keymap of actions (commands) relevant to the
target around point. [[[https://github.com/oantolin/embark][source]]]
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
  (use-package embark
    :ensure t
    :bind
    (("C-." . embark-act)
     ("M-." . embark-dwim))
  )
#+END_SRC
