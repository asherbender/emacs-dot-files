* Spelling

- Use [[http://aspell.net/][aspell]] for spell-checking
- Enable on-the-fly spell checking

** Spelling program

Set spelling program.
#+BEGIN_SRC emacs-lisp
(setq ispell-program-name (executable-find "aspell"))
#+END_SRC

Ensure the ispell process starts in your home directory.
#+BEGIN_SRC emacs-lisp
(setq ispell-process-directory (expand-file-name "~/"))
#+END_SRC

** Fly-spell

- Function for moving to previous/next error and loading corrections

#+BEGIN_SRC emacs-lisp
(defun flyspell-check-next-highlighted-word ()
  "Goto next error and load corrections."
  (interactive)
  (flyspell-goto-next-error)
  (ispell-word)
)
#+END_SRC

- Turn on `flyspell-mode' for all text when a major mode for editing
  text, written for humans to read, is loaded.

- Turn on `flyspell-mode' for comments and strings when a major mode
  for editing programming language source code is loaded

#+BEGIN_SRC emacs-lisp
(use-package flyspell
  :ensure t
  :init
  (progn
    (setq flyspell-issue-message-flag nil
          flyspell-issue-welcome-flag nil)
    (add-hook 'text-mode-hook 'flyspell-mode)
    (add-hook 'prog-mode-hook 'flyspell-prog-mode)

    ;; Correct errors with the right mouse button (rather than the middle).
    '(define-key flyspell-mode-map [down-mouse-3] 'flyspell-correct-word)

    ;; Bind ispell-word and flyspell-goto-next-error to less awkward keys
    (global-set-key (kbd "C-c ,") 'flyspell-check-previous-highlighted-word)
    (global-set-key (kbd "C-c .") 'flyspell-check-next-highlighted-word)
  )
)
#+END_SRC
